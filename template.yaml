AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Stack for example Serverless API
Globals:
  Function:
    Timeout: 10
    CodeUri: todo/
    Runtime: nodejs18.x
    Architectures:
      - x86_64
    Environment:
      Variables:
        TODO_TABLE_NAME: !Ref DynamoDBTodoTable
Resources:
  CreateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create.lambdaHandler
      Events:
        ApiGatewayEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EMAIL_QUEUE_URL: !GetAtt EmailQueue.QueueUrl
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        EntryPoints:
          - create.ts
    DependsOn:
      - DynamoDBTodoTable
      - EmailQueue
  DeleteTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete.lambdaHandler
      Events:
        ApiGatewayEvent:
          Type: Api
          Properties:
            Path: /{id}
            Method: delete
      Role: !GetAtt LambdaRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        EntryPoints:
          - delete.ts
    DependsOn:
      - DynamoDBTodoTable
  FetchTodosFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: fetch.lambdaHandler
      Events:
        ApiGatewayEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
      Role: !GetAtt LambdaRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        EntryPoints:
          - fetch.ts
    DependsOn:
      - DynamoDBTodoTable
  EmailQueueConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: email-queue-consumer.lambdaHandler
      Events:
        EmailSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EmailQueue.Arn
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EMAIL_QUEUE_URL: !GetAtt EmailQueue.QueueUrl
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        EntryPoints:
          - email-queue-consumer.ts
    DependsOn:
      - EmailQueue
  EmailQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Sub ${AWS::StackName}-email-queue
  DynamoDBTodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource: !GetAtt EmailQueue.Arn
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:DeleteItem
                Resource: !GetAtt DynamoDBTodoTable.Arn
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"
                Condition:
                  StringEquals:
                    ses:FromAddress: doguakkaya27@hotmail.com
# Outputs to be used later when EmailQueue is moved to another stack
# Outputs:
#   EmailQueueArn:
#     Value: !GetAtt EmailQueue.Arn
#     Description: "ARN of the EmailQueue"
#   EmailQueueUrl:
#     Value: !GetAtt EmailQueue.QueueUrl
#     Description: "URL of the EmailQueue"
